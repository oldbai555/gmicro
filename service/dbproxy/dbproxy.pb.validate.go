// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: dbproxy.proto

package dbproxy

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetModelListReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetModelListReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetModelListReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetModelListReqMultiError, or nil if none found.
func (m *GetModelListReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetModelListReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ObjType

	// no validation rules for Cond

	// no validation rules for Order

	// no validation rules for Offset

	// no validation rules for Limit

	// no validation rules for SkipCount

	// no validation rules for Db

	// no validation rules for TrId

	// no validation rules for Table

	// no validation rules for Group

	// no validation rules for Unscoped

	// no validation rules for ReturnUnknownFields

	// no validation rules for CorpId

	// no validation rules for CodeFileLineFunc

	// no validation rules for Analyse

	// no validation rules for ScanDb

	// no validation rules for UseBiz

	// no validation rules for NeedCount

	// no validation rules for IgnoreBroken

	if len(errors) > 0 {
		return GetModelListReqMultiError(errors)
	}

	return nil
}

// GetModelListReqMultiError is an error wrapping multiple validation errors
// returned by GetModelListReq.ValidateAll() if the designated constraints
// aren't met.
type GetModelListReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetModelListReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetModelListReqMultiError) AllErrors() []error { return m }

// GetModelListReqValidationError is the validation error returned by
// GetModelListReq.Validate if the designated constraints aren't met.
type GetModelListReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetModelListReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetModelListReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetModelListReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetModelListReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetModelListReqValidationError) ErrorName() string { return "GetModelListReqValidationError" }

// Error satisfies the builtin error interface
func (e GetModelListReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetModelListReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetModelListReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetModelListReqValidationError{}

// Validate checks the field values on GetModelListRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetModelListRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetModelListRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetModelListRspMultiError, or nil if none found.
func (m *GetModelListRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetModelListRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RowsJson

	// no validation rules for Total

	// no validation rules for CorpId

	// no validation rules for ScanDbFinish

	// no validation rules for NextOffset

	if len(errors) > 0 {
		return GetModelListRspMultiError(errors)
	}

	return nil
}

// GetModelListRspMultiError is an error wrapping multiple validation errors
// returned by GetModelListRsp.ValidateAll() if the designated constraints
// aren't met.
type GetModelListRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetModelListRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetModelListRspMultiError) AllErrors() []error { return m }

// GetModelListRspValidationError is the validation error returned by
// GetModelListRsp.Validate if the designated constraints aren't met.
type GetModelListRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetModelListRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetModelListRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetModelListRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetModelListRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetModelListRspValidationError) ErrorName() string { return "GetModelListRspValidationError" }

// Error satisfies the builtin error interface
func (e GetModelListRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetModelListRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetModelListRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetModelListRspValidationError{}

// Validate checks the field values on InsertModelReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *InsertModelReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InsertModelReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InsertModelReqMultiError,
// or nil if none found.
func (m *InsertModelReq) ValidateAll() error {
	return m.validate(true)
}

func (m *InsertModelReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ObjType

	// no validation rules for JsonData

	// no validation rules for Db

	// no validation rules for TrId

	// no validation rules for Table

	// no validation rules for CorpId

	// no validation rules for CodeFileLineFunc

	// no validation rules for IgnoreBroken

	if len(errors) > 0 {
		return InsertModelReqMultiError(errors)
	}

	return nil
}

// InsertModelReqMultiError is an error wrapping multiple validation errors
// returned by InsertModelReq.ValidateAll() if the designated constraints
// aren't met.
type InsertModelReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InsertModelReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InsertModelReqMultiError) AllErrors() []error { return m }

// InsertModelReqValidationError is the validation error returned by
// InsertModelReq.Validate if the designated constraints aren't met.
type InsertModelReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InsertModelReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InsertModelReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InsertModelReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InsertModelReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InsertModelReqValidationError) ErrorName() string { return "InsertModelReqValidationError" }

// Error satisfies the builtin error interface
func (e InsertModelReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInsertModelReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InsertModelReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InsertModelReqValidationError{}

// Validate checks the field values on InsertModelRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *InsertModelRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on InsertModelRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InsertModelRspMultiError,
// or nil if none found.
func (m *InsertModelRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *InsertModelRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for JsonData

	if len(errors) > 0 {
		return InsertModelRspMultiError(errors)
	}

	return nil
}

// InsertModelRspMultiError is an error wrapping multiple validation errors
// returned by InsertModelRsp.ValidateAll() if the designated constraints
// aren't met.
type InsertModelRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InsertModelRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InsertModelRspMultiError) AllErrors() []error { return m }

// InsertModelRspValidationError is the validation error returned by
// InsertModelRsp.Validate if the designated constraints aren't met.
type InsertModelRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InsertModelRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InsertModelRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InsertModelRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InsertModelRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InsertModelRspValidationError) ErrorName() string { return "InsertModelRspValidationError" }

// Error satisfies the builtin error interface
func (e InsertModelRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInsertModelRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InsertModelRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InsertModelRspValidationError{}

// Validate checks the field values on DelModelReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DelModelReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelModelReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DelModelReqMultiError, or
// nil if none found.
func (m *DelModelReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DelModelReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ObjType

	// no validation rules for Cond

	// no validation rules for Db

	// no validation rules for TrId

	// no validation rules for Table

	// no validation rules for Unscoped

	// no validation rules for Limit

	// no validation rules for CorpId

	// no validation rules for CodeFileLineFunc

	// no validation rules for IgnoreBroken

	if len(errors) > 0 {
		return DelModelReqMultiError(errors)
	}

	return nil
}

// DelModelReqMultiError is an error wrapping multiple validation errors
// returned by DelModelReq.ValidateAll() if the designated constraints aren't met.
type DelModelReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelModelReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelModelReqMultiError) AllErrors() []error { return m }

// DelModelReqValidationError is the validation error returned by
// DelModelReq.Validate if the designated constraints aren't met.
type DelModelReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelModelReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelModelReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelModelReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelModelReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelModelReqValidationError) ErrorName() string { return "DelModelReqValidationError" }

// Error satisfies the builtin error interface
func (e DelModelReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelModelReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelModelReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelModelReqValidationError{}

// Validate checks the field values on DelModelRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DelModelRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DelModelRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DelModelRspMultiError, or
// nil if none found.
func (m *DelModelRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *DelModelRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RowsAffected

	if len(errors) > 0 {
		return DelModelRspMultiError(errors)
	}

	return nil
}

// DelModelRspMultiError is an error wrapping multiple validation errors
// returned by DelModelRsp.ValidateAll() if the designated constraints aren't met.
type DelModelRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DelModelRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DelModelRspMultiError) AllErrors() []error { return m }

// DelModelRspValidationError is the validation error returned by
// DelModelRsp.Validate if the designated constraints aren't met.
type DelModelRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DelModelRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DelModelRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DelModelRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DelModelRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DelModelRspValidationError) ErrorName() string { return "DelModelRspValidationError" }

// Error satisfies the builtin error interface
func (e DelModelRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDelModelRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DelModelRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DelModelRspValidationError{}

// Validate checks the field values on UpdateModelReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateModelReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateModelReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateModelReqMultiError,
// or nil if none found.
func (m *UpdateModelReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateModelReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ObjType

	// no validation rules for JsonData

	// no validation rules for Db

	// no validation rules for Cond

	// no validation rules for TrId

	// no validation rules for Table

	// no validation rules for Unscoped

	// no validation rules for CorpId

	// no validation rules for CodeFileLineFunc

	// no validation rules for ShowSql

	// no validation rules for Limit

	// no validation rules for IgnoreBroken

	if len(errors) > 0 {
		return UpdateModelReqMultiError(errors)
	}

	return nil
}

// UpdateModelReqMultiError is an error wrapping multiple validation errors
// returned by UpdateModelReq.ValidateAll() if the designated constraints
// aren't met.
type UpdateModelReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateModelReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateModelReqMultiError) AllErrors() []error { return m }

// UpdateModelReqValidationError is the validation error returned by
// UpdateModelReq.Validate if the designated constraints aren't met.
type UpdateModelReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateModelReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateModelReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateModelReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateModelReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateModelReqValidationError) ErrorName() string { return "UpdateModelReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateModelReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateModelReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateModelReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateModelReqValidationError{}

// Validate checks the field values on UpdateModelRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateModelRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateModelRsp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateModelRspMultiError,
// or nil if none found.
func (m *UpdateModelRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateModelRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RowsAffected

	// no validation rules for JsonData

	// no validation rules for Sql

	if len(errors) > 0 {
		return UpdateModelRspMultiError(errors)
	}

	return nil
}

// UpdateModelRspMultiError is an error wrapping multiple validation errors
// returned by UpdateModelRsp.ValidateAll() if the designated constraints
// aren't met.
type UpdateModelRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateModelRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateModelRspMultiError) AllErrors() []error { return m }

// UpdateModelRspValidationError is the validation error returned by
// UpdateModelRsp.Validate if the designated constraints aren't met.
type UpdateModelRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateModelRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateModelRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateModelRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateModelRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateModelRspValidationError) ErrorName() string { return "UpdateModelRspValidationError" }

// Error satisfies the builtin error interface
func (e UpdateModelRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateModelRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateModelRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateModelRspValidationError{}

// Validate checks the field values on BatchInsertModelReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchInsertModelReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchInsertModelReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchInsertModelReqMultiError, or nil if none found.
func (m *BatchInsertModelReq) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchInsertModelReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ObjType

	// no validation rules for Db

	// no validation rules for IgnoreConflict

	// no validation rules for TrId

	// no validation rules for Table

	// no validation rules for CorpId

	// no validation rules for CodeFileLineFunc

	// no validation rules for IgnoreBroken

	if len(errors) > 0 {
		return BatchInsertModelReqMultiError(errors)
	}

	return nil
}

// BatchInsertModelReqMultiError is an error wrapping multiple validation
// errors returned by BatchInsertModelReq.ValidateAll() if the designated
// constraints aren't met.
type BatchInsertModelReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchInsertModelReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchInsertModelReqMultiError) AllErrors() []error { return m }

// BatchInsertModelReqValidationError is the validation error returned by
// BatchInsertModelReq.Validate if the designated constraints aren't met.
type BatchInsertModelReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchInsertModelReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchInsertModelReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchInsertModelReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchInsertModelReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchInsertModelReqValidationError) ErrorName() string {
	return "BatchInsertModelReqValidationError"
}

// Error satisfies the builtin error interface
func (e BatchInsertModelReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchInsertModelReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchInsertModelReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchInsertModelReqValidationError{}

// Validate checks the field values on BatchInsertModelRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *BatchInsertModelRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BatchInsertModelRsp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BatchInsertModelRspMultiError, or nil if none found.
func (m *BatchInsertModelRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *BatchInsertModelRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LastInsertId

	// no validation rules for RowsAffected

	if len(errors) > 0 {
		return BatchInsertModelRspMultiError(errors)
	}

	return nil
}

// BatchInsertModelRspMultiError is an error wrapping multiple validation
// errors returned by BatchInsertModelRsp.ValidateAll() if the designated
// constraints aren't met.
type BatchInsertModelRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BatchInsertModelRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BatchInsertModelRspMultiError) AllErrors() []error { return m }

// BatchInsertModelRspValidationError is the validation error returned by
// BatchInsertModelRsp.Validate if the designated constraints aren't met.
type BatchInsertModelRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BatchInsertModelRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BatchInsertModelRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BatchInsertModelRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BatchInsertModelRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BatchInsertModelRspValidationError) ErrorName() string {
	return "BatchInsertModelRspValidationError"
}

// Error satisfies the builtin error interface
func (e BatchInsertModelRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBatchInsertModelRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BatchInsertModelRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BatchInsertModelRspValidationError{}

// Validate checks the field values on SetModelReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SetModelReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetModelReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SetModelReqMultiError, or
// nil if none found.
func (m *SetModelReq) ValidateAll() error {
	return m.validate(true)
}

func (m *SetModelReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ObjType

	// no validation rules for JsonData

	// no validation rules for Db

	// no validation rules for TrId

	// no validation rules for Table

	// no validation rules for Unscoped

	// no validation rules for Cond

	// no validation rules for CorpId

	// no validation rules for CodeFileLineFunc

	// no validation rules for IgnoreBroken

	if len(errors) > 0 {
		return SetModelReqMultiError(errors)
	}

	return nil
}

// SetModelReqMultiError is an error wrapping multiple validation errors
// returned by SetModelReq.ValidateAll() if the designated constraints aren't met.
type SetModelReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetModelReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetModelReqMultiError) AllErrors() []error { return m }

// SetModelReqValidationError is the validation error returned by
// SetModelReq.Validate if the designated constraints aren't met.
type SetModelReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetModelReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetModelReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetModelReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetModelReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetModelReqValidationError) ErrorName() string { return "SetModelReqValidationError" }

// Error satisfies the builtin error interface
func (e SetModelReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetModelReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetModelReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetModelReqValidationError{}

// Validate checks the field values on SetModelRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SetModelRsp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetModelRsp with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SetModelRspMultiError, or
// nil if none found.
func (m *SetModelRsp) ValidateAll() error {
	return m.validate(true)
}

func (m *SetModelRsp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RowsAffected

	// no validation rules for JsonData

	if len(errors) > 0 {
		return SetModelRspMultiError(errors)
	}

	return nil
}

// SetModelRspMultiError is an error wrapping multiple validation errors
// returned by SetModelRsp.ValidateAll() if the designated constraints aren't met.
type SetModelRspMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetModelRspMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetModelRspMultiError) AllErrors() []error { return m }

// SetModelRspValidationError is the validation error returned by
// SetModelRsp.Validate if the designated constraints aren't met.
type SetModelRspValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetModelRspValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetModelRspValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetModelRspValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetModelRspValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetModelRspValidationError) ErrorName() string { return "SetModelRspValidationError" }

// Error satisfies the builtin error interface
func (e SetModelRspValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetModelRsp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetModelRspValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetModelRspValidationError{}

// Validate checks the field values on ModelObjectType with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ModelObjectType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ModelObjectType with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ModelObjectTypeMultiError, or nil if none found.
func (m *ModelObjectType) ValidateAll() error {
	return m.validate(true)
}

func (m *ModelObjectType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetFieldList()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ModelObjectTypeValidationError{
					field:  "FieldList",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ModelObjectTypeValidationError{
					field:  "FieldList",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFieldList()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ModelObjectTypeValidationError{
				field:  "FieldList",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ModelObjectTypeMultiError(errors)
	}

	return nil
}

// ModelObjectTypeMultiError is an error wrapping multiple validation errors
// returned by ModelObjectType.ValidateAll() if the designated constraints
// aren't met.
type ModelObjectTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ModelObjectTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ModelObjectTypeMultiError) AllErrors() []error { return m }

// ModelObjectTypeValidationError is the validation error returned by
// ModelObjectType.Validate if the designated constraints aren't met.
type ModelObjectTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ModelObjectTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ModelObjectTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ModelObjectTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ModelObjectTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ModelObjectTypeValidationError) ErrorName() string { return "ModelObjectTypeValidationError" }

// Error satisfies the builtin error interface
func (e ModelObjectTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sModelObjectType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ModelObjectTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ModelObjectTypeValidationError{}

// Validate checks the field values on ObjectFieldList with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ObjectFieldList) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectFieldList with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ObjectFieldListMultiError, or nil if none found.
func (m *ObjectFieldList) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectFieldList) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ObjectFieldListValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ObjectFieldListValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ObjectFieldListValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ObjectFieldListMultiError(errors)
	}

	return nil
}

// ObjectFieldListMultiError is an error wrapping multiple validation errors
// returned by ObjectFieldList.ValidateAll() if the designated constraints
// aren't met.
type ObjectFieldListMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectFieldListMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectFieldListMultiError) AllErrors() []error { return m }

// ObjectFieldListValidationError is the validation error returned by
// ObjectFieldList.Validate if the designated constraints aren't met.
type ObjectFieldListValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectFieldListValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectFieldListValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectFieldListValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectFieldListValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectFieldListValidationError) ErrorName() string { return "ObjectFieldListValidationError" }

// Error satisfies the builtin error interface
func (e ObjectFieldListValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectFieldList.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectFieldListValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectFieldListValidationError{}

// Validate checks the field values on ObjectField with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ObjectField) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ObjectField with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ObjectFieldMultiError, or
// nil if none found.
func (m *ObjectField) ValidateAll() error {
	return m.validate(true)
}

func (m *ObjectField) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FieldName

	// no validation rules for Type

	// no validation rules for Comment

	// no validation rules for IsArray

	if len(errors) > 0 {
		return ObjectFieldMultiError(errors)
	}

	return nil
}

// ObjectFieldMultiError is an error wrapping multiple validation errors
// returned by ObjectField.ValidateAll() if the designated constraints aren't met.
type ObjectFieldMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ObjectFieldMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ObjectFieldMultiError) AllErrors() []error { return m }

// ObjectFieldValidationError is the validation error returned by
// ObjectField.Validate if the designated constraints aren't met.
type ObjectFieldValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ObjectFieldValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ObjectFieldValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ObjectFieldValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ObjectFieldValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ObjectFieldValidationError) ErrorName() string { return "ObjectFieldValidationError" }

// Error satisfies the builtin error interface
func (e ObjectFieldValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sObjectField.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ObjectFieldValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ObjectFieldValidationError{}
